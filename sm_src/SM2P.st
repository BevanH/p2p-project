Object subclass: #MessageParser	instanceVariableNames: 'msg_type sender payload compression time'	classVariableNames: ''	poolDictionaries: ''	category: 'Peer-to-Peer'!!MessageParser methodsFor: 'setters' stamp: 'GVA 10/26/2016 12:01'!setCompression: compressions	"comment stating purpose of message"	| |	compression := compressions.! !!MessageParser methodsFor: 'setters' stamp: 'GVA 10/27/2016 10:31'!setTime: timestamp	"comment stating purpose of message"	| |	time := timestamp.! !!MessageParser methodsFor: 'private' stamp: 'GVA 10/26/2016 11:34'!setMsgPayload: load	"comment stating purpose of message"	| |	payload := load.! !!MessageParser methodsFor: 'private' stamp: 'GVA 10/26/2016 11:34'!setMsgSender: sndr	"comment stating purpose of message"	| |	sender := sndr.! !!MessageParser methodsFor: 'private' stamp: 'GVA 10/26/2016 11:34'!setMsgType: type	"comment stating purpose of message"	| |	msg_type := type.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MessageParser class	instanceVariableNames: ''!!MessageParser class methodsFor: 'private' stamp: 'GVA 10/28/2016 12:11'!decompressString: aString compressions: compressions	"comment stating purpose of message"	| |	^(aString asByteArray).! !!MessageParser class methodsFor: 'private' stamp: 'GVA 10/28/2016 12:17'!process_string: aByteArray	"comment stating purpose of message"	| processed expected pack_lens packets end |	processed := 1.	expected := (aByteArray size) + 1.      pack_lens := OrderedCollection new.      packets := OrderedCollection new.      [processed == expected]		whileFalse: [pack_lens add: (SM2P unpack_value: (aByteArray copyFrom:processed to: (processed+3))).                             processed := processed + 4.                             expected := expected - (pack_lens at: (pack_lens size)).].      "Then reconstruct the packets"      pack_lens do: [:length |          end := processed + length.          packets add: (aByteArray copyFrom:processed to:(end-1)).          processed := end.].      ^packets! !!MessageParser class methodsFor: 'private' stamp: 'GVA 10/28/2016 12:27'!sanitizeString: aByteArray sizeless:isSizeless	"comment stating purpose of message"	| |	^isSizeless		ifTrue: [aByteArray]		ifFalse: [((SM2P unpack_value: (aByteArray copyFrom: 1 to: 4)) == ((aByteArray size) - 4))			ifTrue: [aByteArray allButFirst: 4]			ifFalse: [AssertionFailure signal: 'The size header is incorrect, or the check has not been implemented']]! !!MessageParser class methodsFor: 'class initialization' stamp: 'GVA 10/27/2016 10:38'!feed_string: aString	"comment stating purpose of message"		| |	^(self feed_string: aString sizeless: false compressions: (Array new: 0))! !!MessageParser class methodsFor: 'class initialization' stamp: 'GVA 10/27/2016 10:38'!feed_string: aString compressions: compressions	"comment stating purpose of message"		| |	^(self feed_string: aString sizeless: false compressions: compressions)! !!MessageParser class methodsFor: 'class initialization' stamp: 'GVA 10/27/2016 10:39'!feed_string: aString sizeless: isSizeless	"comment stating purpose of message"		| |	^(self feed_string: aString sizeless: isSizeless compressions: (Array new: 0))! !!MessageParser class methodsFor: 'class initialization' stamp: 'GVA 10/28/2016 12:30'!feed_string: aString sizeless: isSizeless compressions: compressions	"comment stating purpose of message"		| temp_string packets msg |	temp_string := self sanitizeString: aString sizeless: isSizeless.	temp_string := self decompressString: temp_string compressions: compressions.	packets := self process_string: temp_string.	msg := self type: (packets at: 1) sender: (packets at: 2) payload: (packets allButFirst: 5).	msg setTime: (SM2P from_base_58: (packets at: 4)).	msg setCompression: compressions.	^msg.! !!MessageParser class methodsFor: 'class initialization' stamp: 'GVA 10/26/2016 11:33'!type: type sender: sender payload: payload	"comment stating purpose of message"	| msg |	msg := (self new).	msg setMsgType: type.	msg setMsgSender: sender.	msg setMsgPayload: payload.	^msg.! !Object subclass: #SM2P	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Peer-to-Peer'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SM2P class	instanceVariableNames: ''!!SM2P class methodsFor: 'helpers' stamp: 'GVA 10/26/2016 12:00'!to_base_58_helper: aNumber	"comment stating purpose of message"	| base_58 |	base_58 := '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'.	^((aNumber > 0)		ifTrue: [(SM2P to_base_58_helper: (aNumber // 58)), (base_58 at: (aNumber rem: 58)) asString]		ifFalse: ['']).! !!SM2P class methodsFor: 'helpers' stamp: 'GVA 10/28/2016 10:25'!unpack_value_helper: aByteArray	"comment stating purpose of message"	| |	^(aByteArray size > 1)		ifTrue: [256 * (aByteArray at: 1) + (self unpack_value_helper: (aByteArray copyWithoutIndex: 1))]		ifFalse: [aByteArray at: 1]! !!SM2P class methodsFor: 'translation' stamp: 'GVA 10/27/2016 10:28'!from_base_58: aString	"comment stating purpose of message"	| base_58 |	base_58 := '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'.	^(aString size > 0)		ifFalse: [0]		ifTrue: [(aString size > 1)			ifFalse: [(base_58 indexOf: (aString at: 1)) - 1]			ifTrue: [58 * ((base_58 indexOf: (aString at: 1)) - 1) + (self from_base_58: (aString copyWithoutIndex: 1))]]! !!SM2P class methodsFor: 'translation' stamp: 'GVA 10/28/2016 10:18'!pack_value: anInteger length: aLength	"comment stating purpose of message"	| |	^(aLength > 0)		ifTrue: [((self pack_value: (anInteger // 256) length: (aLength - 1)), (String value: (anInteger rem: 256)))]		ifFalse: ['']! !!SM2P class methodsFor: 'translation' stamp: 'GVA 10/26/2016 11:58'!to_base_58: aNumber	"comment stating purpose of message"	| ret |	ret := SM2P to_base_58_helper: aNumber.		^((ret size = 0)		ifTrue: ['1']		ifFalse: [ret])! !!SM2P class methodsFor: 'translation' stamp: 'GVA 10/28/2016 10:23'!unpack_value: aString	"comment stating purpose of message"	| |	^(self unpack_value_helper: (aString asByteArray))! !